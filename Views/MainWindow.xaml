<Window
    x:Class="YukaLister.Views.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:behaviors="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
    xmlns:msm="clr-namespace:YukaLister.Models.SharedMisc"
    xmlns:v="clr-namespace:YukaLister.Views"
    xmlns:vcc="clr-namespace:YukaLister.Views.CustomControls"
    xmlns:vdgc="clr-namespace:YukaLister.Views.DataGridControls"
    xmlns:vm="clr-namespace:YukaLister.ViewModels"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    Title="{Binding Title}" Left="{Binding Left, Mode=TwoWay}" Top="{Binding Top, Mode=TwoWay}" Width="{Binding Width, Mode=TwoWay}" Height="{Binding Height, Mode=TwoWay}" 
    MinWidth="600" MinHeight="300" ResizeMode="CanResizeWithGrip" >

    <Window.DataContext>
        <vm:MainWindowViewModel />
    </Window.DataContext>

    <behaviors:Interaction.Triggers>
        <!--  When ContentRendered event raised, Initialize method of ViewModel would be called.  -->
        <behaviors:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodName="Initialize" MethodTarget="{Binding}" />
        </behaviors:EventTrigger>

        <!--  Dispose method is called, when Window closing.  -->
        <behaviors:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction />
        </behaviors:EventTrigger>

        <!--  If you make user choose 'OK or Cancel' closing Window, then please use Window Close cancel Behavior.  -->

    </behaviors:Interaction.Triggers>

    <DockPanel>
        <DockPanel DockPanel.Dock="Top" Margin="20,20,20,0">
            <Label Content="{Binding YukaListerStatusIcon}" Width="30" VerticalAlignment="Center" Height="30" VerticalContentAlignment="Center" HorizontalContentAlignment="Center">
                <Label.Style>
                    <Style TargetType="Label">
                        <Style.Triggers>
                            <!-- YukariDbYukaListerStatus によって背景を設定する -->
                            <DataTrigger Binding="{Binding YukaListerDbStatus}" Value="{x:Static msm:YukaListerStatus.Ready}">
                                <Setter Property="Background" Value="#E1E1FF" />
                                <Setter Property="Foreground" Value="#0000FF" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding YukaListerDbStatus}" Value="{x:Static msm:YukaListerStatus.Running}">
                                <Setter Property="Background" Value="#E1FFE1" />
                                <Setter Property="Foreground" Value="#32CD32" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding YukaListerDbStatus}" Value="{x:Static msm:YukaListerStatus.Error}">
                                <Setter Property="Background" Value="#FFE1E1" />
                                <Setter Property="Foreground" Value="#FF0000" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Label.Style>
            </Label>
            <Button Style="{StaticResource MaterialDesignRaisedLightButton}" ToolTip="ヘルプ" Width="50" Height="25" DockPanel.Dock="Right" VerticalAlignment="Center">
                <behaviors:Interaction.Triggers>
                    <behaviors:EventTrigger EventName="Click">
                        <behaviors:ChangePropertyAction TargetObject="{Binding ContextMenu, ElementName=ButtonHelp}" PropertyName="IsOpen" Value="True"/>
                        <behaviors:ChangePropertyAction TargetObject="{Binding ContextMenu, ElementName=ButtonHelp}" PropertyName="PlacementTarget" Value="{Binding ElementName=ButtonHelp, Mode=OneWay}"/>
                    </behaviors:EventTrigger>
                </behaviors:Interaction.Triggers>
                <Button.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="ヘルプ (_H)" Command="{Binding MehuItemHelpClickedCommand}" />
                        <Separator />
                        <MenuItem Header="改訂履歴 (_U)" Command="{Binding MenuItemHistoryClickedCommand}" />
                        <MenuItem Header="バージョン情報 (_A)" Command="{Binding MenuItemAboutClickedCommand}" />
                    </ContextMenu>
                </Button.ContextMenu>
                <materialDesign:PackIcon Kind="HelpOutline" Height="18" Width="18" />
            </Button>
            <Button Style="{StaticResource MaterialDesignRaisedLightButton}" ToolTip="環境設定" Width="50" Height="25" Margin="0,0,10,0" DockPanel.Dock="Right" VerticalAlignment="Center" Command="{Binding ButtonYukaListerSettingsClickedCommand}">
                <materialDesign:PackIcon Kind="SettingsOutline" Height="18" Width="18" />
            </Button>
            <materialDesign:Badged Badge="{Binding ReportsBadge}" BadgeColorZoneMode="Dark" DockPanel.Dock="Right" VerticalAlignment="Center" Margin="0,0,15,0" Padding="0,0,-15,0" >
                <Button Style="{StaticResource MaterialDesignRaisedLightButton}" ToolTip="報告されたリストの問題を一覧表示" Width="50" Height="25" Margin="0,0,10,0" Command="{Binding ButtonReportsClickedCommand}">
                    <materialDesign:PackIcon Kind="MessageWarningOutline" Height="18" Width="18" />
                </Button>
            </materialDesign:Badged>
            <Label Content="{Binding YukaListerStatusDisplayMessage}" Margin="0,0,10,0" VerticalAlignment="Center" Height="30" VerticalContentAlignment="Center" Padding="5,0" >
                <Label.Style>
                    <Style TargetType="Label">
                        <Style.Triggers>
                            <!-- YukariDbYukaListerStatus によって背景を設定する -->
                            <DataTrigger Binding="{Binding YukaListerDbStatus}" Value="{x:Static msm:YukaListerStatus.Ready}">
                                <Setter Property="Background" Value="#E1E1FF" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding YukaListerDbStatus}" Value="{x:Static msm:YukaListerStatus.Running}">
                                <Setter Property="Background" Value="#E1FFE1" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding YukaListerDbStatus}" Value="{x:Static msm:YukaListerStatus.Error}">
                                <Setter Property="Background" Value="#FFE1E1" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Label.Style>
            </Label>
        </DockPanel>
        <DockPanel DockPanel.Dock="Top" Margin="0,10,0,0">
            <Border BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" BorderThickness="1" Height="3" Margin="0" Width="20" VerticalAlignment="Center" />
            <Label Content="ゆかり検索対象フォルダー" Margin="10,0" VerticalAlignment="Center"/>
            <Border BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" BorderThickness="1" Height="3" Margin="0" VerticalAlignment="Center" />
        </DockPanel>
        <StatusBar DockPanel.Dock="Bottom">
            <StatusBarItem>
                <Label Content="{Binding StatusBarMessage}" Foreground="{Binding StatusBarColor}" Padding="0" VerticalContentAlignment="Center" />
            </StatusBarItem>
        </StatusBar>
        <DockPanel DockPanel.Dock="Bottom" Margin="20,0,20,20" LastChildFill="False">
            <Button Content="追加 (_A)" Width="100" Height="Auto" ToolTip="ゆかり検索対象フォルダーを追加" >
                <behaviors:Interaction.Triggers>
                    <behaviors:EventTrigger EventName="Click">
                        <l:FolderBrowserDialogInteractionMessageAction>
                            <l:DirectInteractionMessage CallbackMethodName="AddFolderSelected" CallbackMethodTarget="{Binding}">
                                <l:FolderSelectionMessage Description="フォルダーの選択" DialogPreference="None" />
                            </l:DirectInteractionMessage>
                        </l:FolderBrowserDialogInteractionMessageAction>
                    </behaviors:EventTrigger>
                </behaviors:Interaction.Triggers>
            </Button>
            <Button Content="削除 (_D)" Style="{StaticResource MaterialDesignRaisedLightButton}" Width="100" Height="Auto" Margin="20,0,0,0" ToolTip="ゆかり検索対象フォルダーを削除" Command="{Binding ButtonRemoveTargetFolderClickedCommand}" />
            <Button Content="フォルダー設定 (_F)" Style="{StaticResource MaterialDesignRaisedLightButton}" Width="140" Height="Auto" ToolTip="フォルダーの検索設定" DockPanel.Dock="Right" Padding="4" Command="{Binding ButtonFolderSettingsClickedCommand}" />
            <Button Content="ファイル一覧 (_L)" Style="{StaticResource MaterialDesignRaisedLightButton}" Width="140" Height="Auto" Margin="0,0,20,0" ToolTip="ゆかり検索対象のファイルを一覧表示" DockPanel.Dock="Right" Padding="4" Command="{Binding ButtonTFoundsClickedCommand}" />
        </DockPanel>
        <DataGrid AutoGenerateColumns="False" CanUserReorderColumns="False" CanUserSortColumns="False" CanUserResizeRows="False" CanUserAddRows="False" CanUserDeleteRows="False" 
                  SelectionMode="Single" ItemsSource="{Binding TargetFolderInfosVisible}" SelectedItem="{Binding SelectedTargetFolderInfo}" 
                  Margin="20,10,20,20" materialDesign:DataGridAssist.ColumnHeaderPadding="3 5 3 5" materialDesign:DataGridAssist.CellPadding="3" >
            <DataGrid.InputBindings>
                <MouseBinding MouseAction="LeftDoubleClick" Command="{Binding DataGridDoubleClickedCommand}" />
            </DataGrid.InputBindings>
            <DataGrid.ItemContainerStyle>
                <Style TargetType="DataGridRow">
                    <Style.Triggers>
                        <!-- StatusForLabelColor によって背景を設定する -->
                        <DataTrigger Binding="{Binding StatusForLabelColor}" Value="{x:Static msm:FolderTaskStatus.Queued}">
                            <Setter Property="Background" Value="#FAFAFA" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding StatusForLabelColor}" Value="{x:Static msm:FolderTaskStatus.Running}">
                            <Setter Property="Background" Value="#E1FFE1" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding StatusForLabelColor}" Value="{x:Static msm:FolderTaskStatus.Error}">
                            <Setter Property="Background" Value="#FFE1E1" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding StatusForLabelColor}" Value="{x:Static msm:FolderTaskStatus.Done}">
                            <Setter Property="Background" Value="#E1E1FF" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.ItemContainerStyle>
            <DataGrid.Columns>
                <vdgc:DataGridFtcColumn Header="フォルダー" Width="*" Binding="{Binding Mode=OneWay}" IsReadOnly="True" />
                <DataGridTextColumn Header="設定有無" Width="80" Binding="{Binding FolderSettingsStatusLabel}" IsReadOnly="True"/>
                <DataGridTextColumn Header="状態" Width="150" Binding="{Binding FolderTaskStatusLabel}" IsReadOnly="True"/>
            </DataGrid.Columns>
        </DataGrid>
    </DockPanel>

</Window>