<Window x:Class="YukaLister.Views.MiscWindows.YlSettingsWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:behaviors="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        xmlns:msm="clr-namespace:YukaLister.Models.SharedMisc"
        xmlns:sb="clr-namespace:Shinta.Behaviors"
        xmlns:v="clr-namespace:YukaLister.Views"
        xmlns:view="clr-namespace:YukaLister.Views.ImportExportWindows"
        xmlns:vm="clr-namespace:YukaLister.ViewModels"
        xmlns:vmmw="clr-namespace:YukaLister.ViewModels.MiscWindowViewModels"
        xmlns:vosw="clr-namespace:YukaLister.Views.OutputSettingsWindows"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="{Binding Title}" ResizeMode="NoResize" ShowInTaskbar="False" SizeToContent="WidthAndHeight" 
        sb:LaunchUpdaterAttachedBehavior.UpdaterLauncher="{Binding UpdaterLauncher}" sb:LaunchUpdaterAttachedBehavior.Command="{Binding UpdaterUiDisplayedCommand}" >

    <Window.DataContext>
        <vmmw:YlSettingsWindowViewModel />
    </Window.DataContext>

    <behaviors:Interaction.Behaviors>
        <sb:WindowBindingSupportBehavior IsCascade="True" MinimizeBox="False"/>
    </behaviors:Interaction.Behaviors>

    <behaviors:Interaction.Triggers>
        <!-- When ContentRendered event raised, Initialize method of ViewModel would be called. -->
        <behaviors:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize" />
        </behaviors:EventTrigger>

        <!-- Dispose method is called, when Window closing. -->
        <behaviors:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction />
        </behaviors:EventTrigger>

        <!-- If you make user choose 'OK or Cancel' closing Window, then please use Window Close cancel Behavior. -->

        <l:InteractionMessageTrigger MessageKey="{x:Static msm:YlConstants.MESSAGE_KEY_WINDOW_CLOSE}" Messenger="{Binding Messenger}">
            <l:WindowInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="{x:Static msm:YlConstants.MESSAGE_KEY_OPEN_IMPORT_EXPORT_WINDOW}" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction WindowType="{x:Type view:ImportExportWindow}" Mode="Modal" IsOwned="True" InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="{x:Static msm:YlConstants.MESSAGE_KEY_OPEN_OPEN_FILE_DIALOG}" Messenger="{Binding Messenger}">
            <l:OpenFileDialogInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="{x:Static msm:YlConstants.MESSAGE_KEY_OPEN_OUTPUT_SETTINGS_WINDOW}" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction WindowType="{x:Type vosw:OutputSettingsWindow}" Mode="Modal" IsOwned="True" InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="{x:Static msm:YlConstants.MESSAGE_KEY_OPEN_SAVE_FILE_DIALOG}" Messenger="{Binding Messenger}">
            <l:SaveFileDialogInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>

    </behaviors:Interaction.Triggers>

    <StackPanel>
        <TabControl Height="480" Width="570" Margin="10,10,10,0" SelectedIndex="{Binding SelectedTabIndex}" sb:FileDropAttachedBehavior.DropCommand="{Binding TabControlFileDropCommand}">
            <TabItem Header="設定" >
                <StackPanel >
                    <DockPanel Margin="20,20,20,0">
                        <Label Content="ゆかり設定ファイル (_Y)：" Target="{Binding ElementName=TextBoxYukariConfigPathSeed}" VerticalAlignment="Center" Width="140" HorizontalContentAlignment="Right" />
                        <Button Height="Auto" Content="参照 (_B)" Style="{StaticResource MaterialDesignRaisedLightButton}" Margin="0" DockPanel.Dock="Right" Width="100" Command="{Binding ButtonBrowseYukariConfigPathSeedClickedCommand}"/>
                        <TextBox Name="TextBoxYukariConfigPathSeed" Text="{Binding YukariConfigPathSeed}" VerticalAlignment="Center" Margin="0,0,10,0" />
                    </DockPanel>
                    <CheckBox Content="起動時やリムーバブルメディア接続時、前回のフォルダーを自動的に追加する (_A)" IsChecked="{Binding AddFolderOnDeviceArrived}" Margin="20,20,0,0" />
                    <CheckBox Visibility="Hidden" Content="ゆかり用サーバー機能（プレビュー等）を提供する (_P)" IsChecked="{Binding ProvideYukariPreview}" Margin="20,10,0,0" />
                    <DockPanel Margin="20,10,20,0" >
                        <Label Content="ID 先頭付与文字列 (_I)：" Target="{Binding ElementName=TextBoxIdPrefix}" VerticalAlignment="Center" Width="140" HorizontalContentAlignment="Right" />
                        <TextBox Name="TextBoxIdPrefix" Text="{Binding IdPrefix}" Margin="0,0,110,0" ToolTip="お好きな文字列で構いませんが、パソコンごとに異なる文字列を指定してください。" ToolTipService.ShowDuration="{x:Static msm:YlConstants.TOOL_TIP_LONG_DURATION}" materialDesign:HintAssist.Hint="{Binding ElementName=TextBoxIdPrefix, Path=ToolTip}" />
                    </DockPanel>
                </StackPanel>
            </TabItem>
            <TabItem Header="リスト対象">
                <StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="0,20,0,0">
                        <Label Content="リスト化対象ファイルの拡張子 (_E)：" Target="{Binding ElementName=ListBoxTargetExts}" Width="220" HorizontalContentAlignment="Right"/>
                        <ListBox Name="ListBoxTargetExts" ItemsSource="{Binding TargetExts}" SelectedItem="{Binding SelectedTargetExt}" Width="220" Height="200" />
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="220,10,0,0">
                        <Button Height="Auto" Content="↑ 追加 (_A)" Style="{StaticResource MaterialDesignRaisedLightButton}" Margin="0" DockPanel.Dock="Right" Width="100" Padding="4" Command="{Binding ButtonAddExtClickedCommand}"/>
                        <Button Height="Auto" Content="× 削除 (_R)" Style="{StaticResource MaterialDesignRaisedLightButton}" Margin="20,0,0,0" DockPanel.Dock="Right" Width="100" Padding="4" Command="{Binding ButtonRemoveExtClickedCommand}"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                        <Label Content="追加したい拡張子 (_X)：" Target="{Binding ElementName=TextBoxAddingTargetExt}" Width="220" HorizontalContentAlignment="Right"/>
                        <TextBox Name="TextBoxAddingTargetExt" Text="{Binding AddingTargetExt, UpdateSourceTrigger=PropertyChanged}" Width="220" VerticalAlignment="Center" />
                    </StackPanel>
                </StackPanel>
            </TabItem>
            <TabItem Header="リスト出力">
                <StackPanel>
                    <DockPanel Margin="0,10,0,0">
                        <Border BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" BorderThickness="1" Height="3" VerticalAlignment="Center" Margin="0" Width="20"/>
                        <Label Content="ゆかりリクエスト用リスト（PHP）" Margin="10,0"/>
                        <Border BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" BorderThickness="1" Height="3" VerticalAlignment="Center" Margin="0"/>
                    </DockPanel>
                    <DockPanel Margin="20,10,20,0">
                        <Button Height="Auto" Content="出力設定 (_S)" Style="{StaticResource MaterialDesignRaisedLightButton}" Margin="0" DockPanel.Dock="Right" Width="100" Padding="0,4" Command="{Binding ButtonYukariListSettingsClickedCommand}"/>
                        <Label Content="ゆかりリクエスト用リストは、常に自動的に出力・更新されます。"/>
                    </DockPanel>
                    <StackPanel Margin="20,10,0,0">
                        <Label Content="リスト出力先は、ゆかり設定ファイルがあるフォルダーの配下となります。"/>
                    </StackPanel>
                    <DockPanel Margin="0,10,20,0">
                        <Label Content="リスト出力先フォルダー：" Width="170" HorizontalContentAlignment="Right"/>
                        <Label ToolTip="{Binding YukariListFolder}" ToolTipService.ShowDuration="{x:Static msm:YlConstants.TOOL_TIP_LONG_DURATION}" >
                            <TextBlock Text="{Binding YukariListFolder}" TextTrimming="CharacterEllipsis" />
                        </Label>
                    </DockPanel>
                    <StackPanel Margin="20,10,0,0">
                        <CheckBox Visibility="Hidden" IsChecked="{Binding ConfirmOutputYukariList}" Content="ゆかりリクエスト用リスト出力前に確認する (_N)" />
                    </StackPanel>
                    <DockPanel Margin="0,20,0,0">
                        <Border BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" BorderThickness="1" Height="3" VerticalAlignment="Center" Margin="0" Width="20"/>
                        <Label Content="閲覧用リスト" Margin="10,0"/>
                        <Border BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" BorderThickness="1" Height="3" VerticalAlignment="Center" Margin="0"/>
                    </DockPanel>
                    <DockPanel Margin="0,10,20,0">
                        <Label Content="リスト出力形式 (_R)：" Target="{Binding ElementName=ComboBoxOutputWriters}" Width="170" HorizontalContentAlignment="Right"/>
                        <Button Height="Auto" Content="出力設定 (_T)" Style="{StaticResource MaterialDesignRaisedLightButton}" Margin="0" DockPanel.Dock="Right" Width="100" Padding="0,4" Command="{Binding ButtonListSettingsClickedCommand}"/>
                        <ComboBox Name="ComboBoxOutputWriters" ItemsSource="{Binding OutputWriters}" SelectedItem="{Binding SelectedOutputWriter}" DisplayMemberPath="FormatName" Margin="0,0,10,0" materialDesign:ComboBoxAssist.ClassicMode="True" />
                    </DockPanel>
                    <DockPanel Margin="0,10,20,0">
                        <Label Content="リスト出力先フォルダー (_F)：" Target="{Binding ElementName=TextBoxListFolder}" Width="170" HorizontalContentAlignment="Right"/>
                        <Button Height="Auto" Content="参照 (_B)" Style="{StaticResource MaterialDesignRaisedLightButton}" Margin="0" DockPanel.Dock="Right" Width="100" Padding="0,4" >
                            <behaviors:Interaction.Triggers>
                                <behaviors:EventTrigger EventName="Click">
                                    <l:FolderBrowserDialogInteractionMessageAction>
                                        <l:DirectInteractionMessage CallbackMethodName="ListFolderSelected" CallbackMethodTarget="{Binding}">
                                            <l:FolderSelectionMessage Description="リスト出力先フォルダーの選択" DialogPreference="None" />
                                        </l:DirectInteractionMessage>
                                    </l:FolderBrowserDialogInteractionMessageAction>
                                </behaviors:EventTrigger>
                            </behaviors:Interaction.Triggers>
                        </Button>
                        <TextBox Name="TextBoxListFolder" Text="{Binding ListFolder}" VerticalAlignment="Center" Margin="0,0,10,0"/>
                    </DockPanel>
                    <DockPanel Margin="170,10,20,0" >
                        <Button Height="Auto" Content="閲覧用リスト出力 (_L)" Style="{StaticResource MaterialDesignRaisedLightButton}" Margin="0" Width="200" DockPanel.Dock="Right" Command="{Binding ButtonOutputListClickedCommand}" />
                        <ProgressBar Height="Auto" Margin="0,0,10,0" Visibility="{Binding ProgressBarOutputListVisibility}" IsIndeterminate="True" />
                    </DockPanel>
                </StackPanel>
            </TabItem>
            <TabItem Header="メンテナンス">
                <StackPanel>
                    <StackPanel Margin="20,20,0,0">
                        <CheckBox Content="ゆかりすたーの最新情報・更新版を自動的に確認する (_L)" IsChecked="{Binding CheckRss}" />
                    </StackPanel>
                    <DockPanel Margin="20,10,20,0">
                        <Button Height="Auto" Content="今すぐ最新情報を確認する (_N)" Style="{StaticResource MaterialDesignRaisedLightButton}" Margin="0" Width="210" DockPanel.Dock="Right" Padding="4" Command="{Binding ButtonCheckRssClickedCommand}"/>
                        <ProgressBar Height="Auto" Margin="0,0,10,0" Visibility="{Binding ProgressBarCheckRssVisibility}" IsIndeterminate="True"/>
                    </DockPanel>
                    <Label Content="（「セルフ再起動したため終了します」というメッセージの後、しばらくしてから確認結果が表示されます）" Foreground="{DynamicResource MaterialDesignBodyLight}" HorizontalContentAlignment="Right" />
                    <StackPanel Margin="20,10,0,0">
                        <Label Content="設定のバックアップ（ファイルに保存）"/>
                    </StackPanel>
                    <StackPanel Margin="0,10,20,0">
                        <Button Height="Auto" Content="設定のバックアップ(_B)" Style="{StaticResource MaterialDesignRaisedLightButton}" Margin="0" Width="210" DockPanel.Dock="Right" HorizontalAlignment="Right" Command="{Binding ButtonBackupClickedCommand}"/>
                        <Button Visibility="Hidden" Height="Auto" Content="設定の復元(_R)" Style="{StaticResource MaterialDesignRaisedLightButton}" Margin="0,10,0,0" Width="210" DockPanel.Dock="Right" HorizontalAlignment="Right" Command="{Binding ButtonRestoreClickedCommand}"/>
                    </StackPanel>
                </StackPanel>
            </TabItem>
            <TabItem Header="楽曲情報データベース" >
                <StackPanel>
                    <Label Content="ファイルから楽曲情報データベースをインポートする (_S)" Margin="20,15,20,0" Target="{Binding ElementName=TextBoxImportYukaListerPath}" />
                    <DockPanel Margin="40,10,20,0">
                        <Button Height="Auto" Content="参照 (_B)" Style="{StaticResource MaterialDesignRaisedLightButton}" Margin="0" DockPanel.Dock="Right" Width="100" Command="{Binding ButtonBrowseImportYukaListerClickedCommand}"/>
                        <TextBox Name="TextBoxImportYukaListerPath" Text="{Binding ImportYukaListerPath}" ToolTip="インポート元ファイル" ToolTipService.ShowDuration="{x:Static msm:YlConstants.TOOL_TIP_LONG_DURATION}" materialDesign:HintAssist.Hint="{Binding ElementName=TextBoxImportYukaListerPath, Path=ToolTip}" VerticalAlignment="Center" Margin="0,0,10,0" Cursor="IBeam"/>
                    </DockPanel>
                    <StackPanel Margin="40,10,0,0">
                        <CheckBox Content="タグ情報をインポートする (_T)" IsChecked="{Binding ImportTag}" />
                    </StackPanel>
                    <DockPanel Margin="0,20,0,0">
                        <Border BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" BorderThickness="1" Height="3" VerticalAlignment="Center" Margin="0"/>
                    </DockPanel>
                    <StackPanel Margin="0,20,20,0">
                        <Button Height="Auto" Content="インポート (_I)" Style="{StaticResource MaterialDesignRaisedLightButton}" Margin="0" Width="210" HorizontalAlignment="Right" Command="{Binding ButtonImportClickedCommand}"/>
                    </StackPanel>
                    <StackPanel Margin="20,10,0,0">
                        <CheckBox Content="楽曲情報データベースを同期する (_S)" IsChecked="{Binding SyncMusicInfoDb}" />
                    </StackPanel>
                    <DockPanel Margin="0,10,20,0" IsEnabled="{Binding SyncMusicInfoDb}">
                        <Label Content="サーバー URL (_U)：" Target="{Binding ElementName=TextBoxSyncServer}" Width="170" HorizontalContentAlignment="Right"/>
                        <TextBox Name="TextBoxSyncServer" Text="{Binding SyncServer}" VerticalAlignment="Center"/>
                    </DockPanel>
                    <DockPanel Margin="0,10,20,0" IsEnabled="{Binding SyncMusicInfoDb}">
                        <Label Content="アカウント名 (_A)：" Target="{Binding ElementName=TextBoxSyncAccount}" Width="170" HorizontalContentAlignment="Right"/>
                        <TextBox Name="TextBoxSyncAccount" Text="{Binding SyncAccount}" VerticalAlignment="Center"/>
                    </DockPanel>
                    <DockPanel Margin="0,10,20,0" IsEnabled="{Binding SyncMusicInfoDb}">
                        <Label Content="パスワード (_P)：" Target="{Binding ElementName=PasswordBoxSyncPassword}" Width="170" HorizontalContentAlignment="Right"/>
                        <PasswordBox Name="PasswordBoxSyncPassword" VerticalAlignment="Center">
                            <behaviors:Interaction.Behaviors>
                                <l:PasswordBoxBindingSupportBehavior Password="{Binding SyncPassword}" />
                            </behaviors:Interaction.Behaviors>
                        </PasswordBox>
                    </DockPanel>
                    <StackPanel Margin="20,10,0,0" IsEnabled="{Binding SyncMusicInfoDb}">
                        <Label Content="強制的に楽曲情報データベースの内容をサーバーに合わせる（ローカルデータは失われます）"/>
                    </StackPanel>
                    <StackPanel Margin="0,10,20,0">
                        <Button Height="Auto" Content="強制的に合わせる (_F)" Style="{StaticResource MaterialDesignRaisedLightButton}" Margin="0" Width="210" DockPanel.Dock="Right" HorizontalAlignment="Right" Command="{Binding ButtonRegetClickedCommand}"/>
                    </StackPanel>
                </StackPanel>
            </TabItem>
            <TabItem Header="インポート">
                <StackPanel >
                </StackPanel>
            </TabItem>
            <TabItem Header="エクスポート">
                <StackPanel >
                    <StackPanel Margin="20,15,20,0">
                        <Label Content="エクスポート先 (_T)" Target="{Binding ElementName=TextBoxExportYukaListerPath}" />
                    </StackPanel>
                    <DockPanel Margin="40,10,20,0">
                        <Button Height="Auto" Content="参照 (_B)" Style="{StaticResource MaterialDesignRaisedLightButton}" Margin="0" DockPanel.Dock="Right" Width="100" Command="{Binding ButtonBrowseExportYukaListerClickedCommand}"/>
                        <TextBox Name="TextBoxExportYukaListerPath" Text="{Binding ExportYukaListerPath}" VerticalAlignment="Center" Margin="0,0,10,0"/>
                    </DockPanel>
                    <DockPanel Margin="0,20,0,0">
                        <Border BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" BorderThickness="1" Height="3" VerticalAlignment="Center" Margin="0"/>
                    </DockPanel>
                    <StackPanel Margin="0,20,20,0">
                        <Button Height="Auto" Content="エクスポート (_E)" Style="{StaticResource MaterialDesignRaisedLightButton}" Margin="0" Width="210" HorizontalAlignment="Right" Command="{Binding ButtonExportClickedCommand}"/>
                    </StackPanel>
                </StackPanel>
            </TabItem>
        </TabControl>
        <DockPanel Margin="20">
            <Button Content="キャンセル" Margin="0" Height="Auto" Style="{StaticResource MaterialDesignRaisedLightButton}" IsCancel="True" Width="100" DockPanel.Dock="Right" Padding="4"/>
            <Button Content="_OK" Margin="0,0,20,0" Height="Auto" IsDefault="True" Width="100" DockPanel.Dock="Right" Command="{Binding ButtonOkClickedCommand}" sb:IsFocusedAttachedBehavior.IsFocused="{Binding IsButtonOkFocused}"/>
            <Label Content="設定やデータベースメンテナンス等を行います。" HorizontalAlignment="Left" Margin="0" VerticalAlignment="Center"/>
            <Label Grid.Column="1" Margin="0" VerticalAlignment="Center" HorizontalAlignment="Left">
                <Hyperlink Command="{Binding HelpClickedCommand}" CommandParameter="Kankyousettei" >
                    <TextBlock Text="詳細情報" />
                </Hyperlink>
            </Label>
        </DockPanel>
    </StackPanel>

</Window>