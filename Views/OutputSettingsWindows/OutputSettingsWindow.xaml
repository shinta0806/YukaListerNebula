<Window x:Class="YukaLister.Views.OutputSettingsWindows.OutputSettingsWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:behaviors="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:msm="clr-namespace:YukaLister.Models.SharedMisc"
        xmlns:sb="clr-namespace:Shinta.Behaviors"
        xmlns:v="clr-namespace:YukaLister.Views"
        xmlns:vm="clr-namespace:YukaLister.ViewModels"
        xmlns:vmoswvm="clr-namespace:YukaLister.ViewModels.OutputSettingsWindowViewModels"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="{Binding Title}" ResizeMode="NoResize" ShowInTaskbar="False" SizeToContent="WidthAndHeight" >

    <Window.DataContext>
        <vmoswvm:OutputSettingsWindowViewModel />
    </Window.DataContext>

    <behaviors:Interaction.Behaviors>
        <sb:WindowBindingSupportBehavior IsCascade="True" MinimizeBox="False"/>
    </behaviors:Interaction.Behaviors>

    <behaviors:Interaction.Triggers>
        <!-- When ContentRendered event raised, Initialize method of ViewModel would be called. -->
        <behaviors:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize" />
        </behaviors:EventTrigger>

        <!-- Dispose method is called, when Window closing. -->
        <behaviors:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction />
        </behaviors:EventTrigger>

        <!-- If you make user choose 'OK or Cancel' closing Window, then please use Window Close cancel Behavior. -->

        <l:InteractionMessageTrigger MessageKey="{x:Static msm:YlConstants.MESSAGE_KEY_WINDOW_CLOSE}" Messenger="{Binding Messenger}">
            <l:WindowInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>

    </behaviors:Interaction.Triggers>

    <StackPanel>
        <StackPanel>
            <TabControl ItemsSource="{Binding TabItems}" SelectedIndex="{Binding SelectedTabIndex}" MinHeight="{Binding MinTabControlHeight}" MinWidth="{Binding MinTabControlWidth}" Margin="10,10,10,0" HorizontalAlignment="Left" VerticalAlignment="Top" >
                <behaviors:Interaction.Triggers>
                    <behaviors:EventTrigger EventName="SizeChanged">
                        <l:FrameworkElementSetStateToSourceAction Source="{Binding ActualTabControlWidth, Mode=TwoWay}" Property="ActualWidth" />
                        <l:FrameworkElementSetStateToSourceAction Source="{Binding ActualTabControlHeight, Mode=TwoWay}" Property="ActualHeight" />
                    </behaviors:EventTrigger>
                </behaviors:Interaction.Triggers>
            </TabControl>
        </StackPanel>
        <DockPanel Margin="20,20,20,20" LastChildFill="False">
            <Button Content="初期化 (_I)" Style="{StaticResource MaterialDesignRaisedLightButton}" Width="100" Height="Auto" ToolTip="出力設定を初期設定に戻す" Padding="4" Command="{Binding ButtonDefaultClickedCommand}" />
            <Button Content="キャンセル" Margin="0" Height="Auto" Style="{StaticResource MaterialDesignRaisedLightButton}" IsCancel="True" Width="100" Padding="4" DockPanel.Dock="Right"/>
            <Button Content="_OK" Height="Auto" IsDefault="True" Width="100" Command="{Binding ButtonOkClickedCommand}" sb:IsFocusedAttachedBehavior.IsFocused="{Binding IsButtonOkFocused}" DockPanel.Dock="Right" Margin="0,0,20,0" />
        </DockPanel>
    </StackPanel>

</Window>