// ============================================================================
// 
// ネビュラコアの基底クラス
// 
// ============================================================================

// ----------------------------------------------------------------------------
//
// ----------------------------------------------------------------------------

using Livet;

using Shinta;

using System;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;

using YukaLister.Models.YukaListerModels;

namespace YukaLister.Models.YukaListerCores
{
	internal abstract class YlCore : IDisposable
	{
		// ====================================================================
		// コンストラクター
		// ====================================================================

		// --------------------------------------------------------------------
		// メインコンストラクター
		// --------------------------------------------------------------------
		public YlCore()
		{
		}

		// ====================================================================
		// public プロパティー
		// ====================================================================

		// メインルーチンを実行しているタスク
		public Task? MainTask { get; private set; }

		// コアメインルーチン待機用イベント
		public AutoResetEvent MainEvent { get; } = new(false);

		// ====================================================================
		// public 関数
		// ====================================================================

		// --------------------------------------------------------------------
		// IDisposable.Dispose()
		// --------------------------------------------------------------------
		public void Dispose()
		{
			Dispose(true);
			GC.SuppressFinalize(this);
		}

		// --------------------------------------------------------------------
		// 稼働開始
		// UI スレッドから呼ばれる前提
		// --------------------------------------------------------------------
		public void Start()
		{
			Debug.Assert(Environment.CurrentManagedThreadId == DispatcherHelper.UIDispatcher.Thread.ManagedThreadId, "Start() not UI thread");

			// UI スレッドから呼ばれる前提のため、この方法で排他にできる
			if (MainTask != null)
			{
				return;
			}

			MainTask = Task.Factory.StartNew(StartCoreMain, TaskCreationOptions.LongRunning);
		}

		// ====================================================================
		// protected 関数
		// ====================================================================

		// --------------------------------------------------------------------
		// ネビュラコアのメインルーチン
		// --------------------------------------------------------------------
		protected abstract Task CoreMainAsync();

		// --------------------------------------------------------------------
		// リソース解放
		// --------------------------------------------------------------------
		protected virtual void Dispose(Boolean isDisposing)
		{
			if (_isDisposed)
			{
				return;
			}

			// マネージドリソース解放
			if (isDisposing)
			{
				MainEvent.Dispose();
			}

			// アンマネージドリソース解放
			// 今のところ無し
			// アンマネージドリソースを持つことになった場合、ファイナライザの実装が必要

			// 解放完了
			_isDisposed = true;
		}

		// ====================================================================
		// private 変数
		// ====================================================================

		// Dispose フラグ
		private Boolean _isDisposed;

		// ====================================================================
		// protected 関数
		// ====================================================================

		// --------------------------------------------------------------------
		// ネビュラコアのメインルーチンを稼働開始
		// イベントハンドラー的なシグニチャー
		// --------------------------------------------------------------------
		private async void StartCoreMain()
		{
			// アプリ終了時に強制終了されないように設定
			Thread.CurrentThread.IsBackground = false;

			YlModel.Instance.EnvModel.LogWriter.LogMessage(Common.TRACE_EVENT_TYPE_STATUS, GetType().Name + " の稼働を開始します。");
			await CoreMainAsync();
			YlModel.Instance.EnvModel.LogWriter.LogMessage(Common.TRACE_EVENT_TYPE_STATUS, GetType().Name + " の稼働を終了します。");
		}
	}
}
